function xdot = RRode(t, x)
    global g m1 m2 m3 l1 l2 l3 La Lb r TT t_
    global lj XL

    xdot = zeros(6, 1);
    q = x(1:3);
    dq = x(4:6);

    % Compute the Jacobian, mass matrix, and other related parameters
    [~, Jk, ~, S_] = cables(lj, XL, q, dq);

    % Calculate control torques
    [Tau, ~] = controle(t, x);
    T = (1 / r) * Tau;

    % Calculate centrifugal and Coriolis forces
    vFc = computeForces(q, dq);

    % Initial velocity vector
    ivp = [q; dq];
    MassMat = Mass_matrix(ivp);

    % Compute forces and dynamics
    vFc = -inv(MassMat) * [x(4), x(5), x(6), vFc]' + Jk' * S_ * T;

    % Assign derivatives
    xdot(1:3) = dq;
    xdot(4:6) = vFc(1:3);

    % Display current time step (optional for debugging)
    clc
    t
end

function vFc = computeForces(q, dq)
    global g m1 m2 m3 l1 l2 l3

    vFc = zeros(3, 1);

    % Force calculations for q1
    vFc(1) = -(1/2) * m2 * l1 * l2 * dq(2)^2 * sin(q(2)) - ...
             m3 * l1 * l2 * dq(2)^2 * sin(q(2)) - ...
             (1/2) * m3 * l1 * l3 * dq(2)^2 * sin(q(2) + q(3)) - ...
             m2 * l1 * dq(1) * l2 * sin(q(2)) * dq(2) - ...
             2 * m3 * l1 * dq(1) * l2 * sin(q(2)) * dq(2) - ...
             m3 * l1 * dq(1) * l3 * sin(q(2) + q(3)) * dq(2) - ...
             m3 * l1 * l3 * dq(3) * sin(q(2) + q(3)) * dq(2) - ...
             m3 * l2 * dq(2) * l3 * sin(q(3)) * dq(3) - ...
             m3 * l1 * dq(1) * l3 * sin(q(2) + q(3)) * dq(3) - ...
             m3 * l2 * dq(1) * l3 * sin(q(3)) * dq(3) - ...
             (1/2) * m3 * l1 * l3 * dq(3)^2 * sin(q(2) + q(3)) - ...
             (1/2) * m3 * l2 * l3 * dq(3)^2 * sin(q(3)) + ...
             (1/2) * m3 * g * l3 * cos(q(1) + q(2) + q(3)) + ...
             (1/2) * m1 * g * l1 * cos(q(1)) + ...
             m2 * g * l1 * cos(q(1)) + ...
             m3 * g * l1 * cos(q(1)) + ...
             (1/2) * m2 * g * l2 * cos(q(1) + q(2)) + ...
             m3 * g * l2 * cos(q(1) + q(2));

    % Force calculations for q2
    vFc(2) = -m3 * l2 * dq(2) * l3 * sin(q(3)) * dq(3) + ...
              (1/2) * sin(q(2)) * dq(1)^2 * l1 * l2 * m2 + ...
              sin(q(2)) * dq(1)^2 * l1 * l2 * m3 + ...
              (1/2) * dq(1)^2 * sin(q(2) + q(3)) * l1 * l3 * m3 - ...
              m3 * l2 * dq(1) * l3 * sin(q(3)) * dq(3) - ...
              (1/2) * m3 * l2 * l3 * dq(3)^2 * sin(q(3)) + ...
              (1/2) * m3 * g * l3 * cos(q(1) + q(2) + q(3)) + ...
              (1/2) * m2 * g * l2 * cos(q(1) + q(2)) + ...
              m3 * g * l2 * cos(q(1) + q(2));

    % Force calculations for q3
    vFc(3) = (1/2) * m3 * l3 * (dq(2)^2 * sin(q(3)) * l2 + ...
               2 * dq(2) * dq(1) * sin(q(3)) * l2 + ...
               dq(1)^2 * sin(q(2) + q(3)) * l1 + ...
               dq(1)^2 * sin(q(3)) * l2 + ...
               g * cos(q(1) + q(2) + q(3)));
end
